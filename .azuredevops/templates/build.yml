# small subset of files to check for install to determine pass/fail
parameters:
- name: expectedInstallFiles
  type: object
  default:
    - bin/rccl-UnitTests
    - include/rccl/rccl.h
    - lib/cmake/rccl/rccl-config.cmake
    - lib/librccl.so
    - share/doc/rccl/LICENSE.txt
    - share/rccl/msccl-algorithms
    - share/rccl/msccl-unit-test-algorithms

steps:
  - task: Bash@3
    displayName: Build Job
    env:
      BINARIES_DIR: $(Build.BinariesDirectory)
    inputs:
      targetType: inline
      script: |
        echo "##[section]Starting build job..."

        rm -rf $(Build.BinariesDirectory)/*

        echo "Submitting build job..."
        mkdir -p $(Build.BinariesDirectory)
        BUILD_JOB_ID=$(sbatch --export=ALL --parsable $(Build.SourcesDirectory)/.azuredevops/slurm/build.sh)
        echo "Submitted build job: $BUILD_JOB_ID"
        echo "##vso[task.setvariable variable=BUILD_JOB_ID]$BUILD_JOB_ID"

        echo "Waiting for build job to start..."
        while squeue -j $BUILD_JOB_ID 2>/dev/null | grep -q $BUILD_JOB_ID; do
          echo "##[section]Build job $BUILD_JOB_ID is still running..."
          sleep 60
        done

        echo "Waiting for final status via sacct..."
        LOOP_COUNT=0
        MAX_LOOPS=30  # Maximum of 30 loops (30 minutes)
        while true; do
          STATE=$(sacct -j "$BUILD_JOB_ID" --format=JobID,State --noheader | awk '$1 ~ /\.batch$/ { print $2; exit }' | xargs)
          echo "##[section]Build job state: $STATE"
          if [[ "$STATE" == "COMPLETED" ]]; then
            break
          elif [[ "$STATE" =~ ^(FAILED|CANCELLED|TIMEOUT)$ ]]; then
            echo "Build failed with state $STATE"
            break
          fi
          sleep 60
          LOOP_COUNT=$((LOOP_COUNT + 1))
          if [ $LOOP_COUNT -ge $MAX_LOOPS ]; then
            echo "Time limit reached while waiting for final status."
            exit 1  # Exit with an error code if time limit is reached
          fi
        done

        echo "Checking for expected installed files..."
        MISSING_FILES=0

        expectedFiles="${{ join(' ', parameters.expectedInstallFiles) }}"
        i=1
        total=$(echo "$expectedFiles" | wc -w)
        while [ $i -le $total ]; do
          relpath=$(echo "$expectedFiles" | cut -d ' ' -f"$i")
          fullpath="$BINARIES_DIR/$relpath"
          if [ ! -e "$fullpath" ]; then
            echo "##vso[task.logissue type=error]Missing expected file: $fullpath"
            MISSING_FILES=1
          fi
          i=$((i + 1))
        done

        if [ "$MISSING_FILES" -eq 1 ]; then
          echo "One or more expected files are missing from the install directory."
          exit 1
        else
          echo "All expected files are present in the install directory."
        fi
  - task: Bash@3
    displayName: Build Logs
    condition: always()
    inputs:
      targetType: inline
      script: |
        cat rccl-build-${BUILD_JOB_ID}.out || echo "No log found"
